#include <memory>
#include <vector>
#include <valarray>
#include <tuple>
#include <array>
#include <iostream>
#include <bspline/bspline.h>
#include <gtest/gtest.h>


using namespace std;
using namespace bspline;

TEST(bisect, empty_array)
{
    vector<int> v {};
    int i = 100;
    i = bisect(v, 100);
    EXPECT_EQ(i, 0);
}

TEST(bisect, one_element_array)
{
    vector<int> v {1};
    int i = 100;
    i = bisect(v, 100);
    EXPECT_EQ(i, 0);
}

TEST(bisect, usual)
{
    vector<int> v {1, 2, 200};
    EXPECT_EQ(bisect(v, -1), 0);
    EXPECT_EQ(bisect(v, 0), 0);
    EXPECT_EQ(bisect(v, 1), 0);
    EXPECT_EQ(bisect(v, 2), 1);
    EXPECT_EQ(bisect(v, 3), 1);
    EXPECT_EQ(bisect(v, 5), 1);
    EXPECT_EQ(bisect(v, 199), 1);
    EXPECT_EQ(bisect(v, 200), 2);
    EXPECT_EQ(bisect(v, 201), 2);
    EXPECT_EQ(bisect(v, 1000), 2);
}

TEST(bisect, negative)
{
    vector<int> v {-2, -1, 0, 1, 2, 5, 7};
    EXPECT_EQ(bisect(v, -100), 0);
    EXPECT_EQ(bisect(v, -3), 0);
    EXPECT_EQ(bisect(v, -2), 0);
    EXPECT_EQ(bisect(v, -1), 1);
    EXPECT_EQ(bisect(v, 0), 2);
    EXPECT_EQ(bisect(v, 1), 3);
    EXPECT_EQ(bisect(v, 2), 4);
    EXPECT_EQ(bisect(v, 3), 4);
    EXPECT_EQ(bisect(v, 4), 4);
    EXPECT_EQ(bisect(v, 5), 5);
    EXPECT_EQ(bisect(v, 6), 5);
    EXPECT_EQ(bisect(v, 7), 6);
    EXPECT_EQ(bisect(v, 8), 6);
    EXPECT_EQ(bisect(v, 100), 6);
}

struct Arr
{
    int size() const { return 8; }
    int operator [] (int i) const { return i*i; }
};

TEST(bisect, custom_array)
{
    Arr arr;
    for (int i = -1000; i < 1000; ++ i)
    {
        int k = i < 0 ? 0 : int(sqrt(i));
        k = min(k, arr.size() - 1);
        EXPECT_EQ(bisect(arr, i), k);
    }
}

TEST(bisect, float_array)
{
    array<float, 7> v {-2.f, -1.f, 4.f, 8.f, 8.00001f, 8.00002f, 8.00003f};
    EXPECT_EQ(bisect(v, -3.f), 0);
    EXPECT_EQ(bisect(v, -2.f), 0);
    EXPECT_EQ(bisect(v, -1.0000001f), 0);
    EXPECT_EQ(bisect(v, -1.f), 1);
    EXPECT_EQ(bisect(v, -0.9999999f), 1);
    EXPECT_EQ(bisect(v, 7.999999f), 2);
    EXPECT_EQ(bisect(v, 8.0f), 3);
    EXPECT_EQ(bisect(v, 8.000005f), 3);
    EXPECT_EQ(bisect(v, 8.00001f), 4);
    EXPECT_EQ(bisect(v, 8.000015f), 4);
    EXPECT_EQ(bisect(v, 8.00002f), 5);
    EXPECT_EQ(bisect(v, 8.000025f), 5);
    EXPECT_EQ(bisect(v, 8.00003f), 6);
    EXPECT_EQ(bisect(v, 8.000035f), 6);
}

TEST(bspline, evaluate_derivatives)
{
    vector<double> t {-1.48585135, -1.48585135, -1.48585135, -1.48585135, -1.13146015, -0.94764448,
        -0.27285909, 0.00700573, 0.10728107, 0.13703105, 0.7289507, 0.7289507, 0.7289507, 0.7289507 };
    vector<double> c {-0.99639434, -0.98639558, -0.93904056, -0.73356079, -0.40509636, -0.05280605,
        0.08375401, 0.32264514, 0.51920575, 0.66608736 };
    int k = 3;

    vector<array<double,4>> dataset {
        {-1.4858513500e+00, -9.9639434000e-01, 8.4641717966e-02, 1.0119790493e+00},
        {-1.4858513400e+00, -9.9639433915e-01, 8.4641728086e-02, 1.0119790464e+00},
        {-1.1314601600e+00, -9.0503421921e-01, 4.2478201343e-01, 9.0759629600e-01},
        {-1.1314601500e+00, -9.0503421496e-01, 4.2478202250e-01, 9.0759629305e-01},
        {-1.1314601400e+00, -9.0503421071e-01, 4.2478203158e-01, 9.0759628896e-01},
        {-1.2315155200e+00, -9.4294375741e-01, 3.3249780301e-01, 9.3706670682e-01},
        {5.6123544000e-01, 5.3226238086e-01, 8.4708861348e-01, -5.3449866877e-01},
        {1.0728106000e-01, 1.0707539127e-01, 9.9425157548e-01, -1.0443625092e-01},
        {1.0728107000e-01, 1.0707540122e-01, 9.9425157444e-01, -1.0443626009e-01},
        {1.0728108000e-01, 1.0707541116e-01, 9.9425157340e-01, -1.0443627274e-01},
        {7.2895069000e-01, 6.6608735256e-01, 7.4443352925e-01, -6.8966054434e-01},
        {7.2895070000e-01, 6.6608736000e-01, 7.4443352235e-01, -6.8966055360e-01},
    };

    for (int i = 0; i < dataset.size(); ++ i)
    {
        double arg = dataset[i][0];
        double expect_val = dataset[i][1];
        double expect_der = dataset[i][2];
        double expect_der2 = dataset[i][3];

        double val = spline_eval(t, c, k, arg);
        double der = spline_eval(t, c, k, arg, 1);
        double der2 = spline_eval(t, c, k, arg, 2);

        EXPECT_NEAR(val, expect_val, 1e-8);
        EXPECT_NEAR(der, expect_der, 1e-8);
        EXPECT_NEAR(der2, expect_der2, 1e-8);
    }
}

TEST(bspline, extrapolation)
{
    vector<double> t {-0.977277879876411, -0.977277879876411, -0.977277879876411, -0.977277879876411, -0.977277879876411, -0.977277879876411, -0.1513572082976979, 0.4001572083672233, 0.9500884175255894, 0.9787379841057392, 1.764052345967664, 1.8675579901499675, 2.240893199201458, 2.240893199201458, 2.240893199201458, 2.240893199201458, 2.240893199201458, 2.240893199201458};
    vector<double> c {-0.10321885179355784, 0.41059850193837233, 0.144043571160878, 1.454273506962975, 0.7610377251469934, 0.12167501649282841, 0.44386323274542566, 0.33367432737426683, 1.4940790731576061, -0.20515826376580087, 0.31306770165090136, -0.8540957393017248};
    int k = 5;

    vector<double> args {-1.977277879876411, -0.977277979876411, -0.9772777798764111, 2.240893099201458, 2.2408932992014576, 3.240893199201458};
    vector<double> vals {-54.89716315900815, -0.10321916285098405, -0.10321854073632927, -0.8540941761453869, -0.8540973024603196, -1860.199706254425};
    vector<double> derivs1 {175.60392881328795, 3.110575250537784, 3.1105713003759643, -15.631552120102647, -15.63159726028795, -7236.59706981584};
    vector<double> derivs2 {-444.7985398289824, -19.75082088300615, -19.75079732299285, -225.70066352525578, -225.70119026570725, -22448.44677922692};
    vector<double> derivs3 {835.1758936954085, 117.80010743094554, 117.80002568407944, -2633.7003873371646, -2633.7041368693476, -52027.00255732891};

    for (int i = 0; i < args.size(); ++ i)
    {
        double val = spline_eval(t, c, k, args[i]);
        double der1 = spline_eval(t, c, k, args[i], 1);
        double der2 = spline_eval(t, c, k, args[i], 2);
        double der3 = spline_eval(t, c, k, args[i], 3);
        EXPECT_NEAR(val, vals[i], 1e-8);
        EXPECT_NEAR(der1, derivs1[i], 1e-8);
        EXPECT_NEAR(der2, derivs2[i], 1e-8);
        EXPECT_NEAR(der3, derivs3[i], 1e-8);
    } 
}

TEST(bspline, sin_fitted)
{
    vector<double> t = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2727272727272727, 0.36363636363636365, 0.4545454545454546, 0.5454545454545454, 0.6363636363636364, 0.7272727272727273, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    vector<double> c = {0.0, 0.05454544894512217, 0.1272727403362619, 0.21743047382656358, 0.3229903259979744, 0.4399621045588489, 0.5198798283002958, 0.6257536424268443, 0.7076499953631895, 0.7685327170091916, 0.8119999244487935, 0.8414709848078965};
    int k = 5;

    for (double x = 0; x <= 1.; x += 1e-3)
    {
        double y = spline_eval(t, c, k, x);
        double dy = spline_eval(t, c, k, x, 1);
        double ddy = spline_eval(t, c, k, x, 2);
        EXPECT_NEAR(y, sin(x), 1e-8);
        EXPECT_NEAR(dy, cos(x), 1e-6);
        EXPECT_NEAR(ddy, -sin(x), 1e-4);
    }
}

TEST(bspline, vecvalued_function)
{
    vector<double> t = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2727272727272727, 0.36363636363636365, 0.4545454545454546, 0.5454545454545454, 0.6363636363636364, 0.7272727272727273, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
    vector<valarray<double>> c = {{0.000000000000, 1.000000000000}, {0.054545448945, 1.054545495111}, {0.127272740336, 1.132231305515}, {0.217430473827, 1.238354874590}, {0.322990325998, 1.380932654459}, {0.439962104559, 1.572205610707}, {0.519879828300, 1.721831537306}, {0.625753642427, 1.951243582222}, {0.707649995363, 2.175953476532}, {0.768532717009, 2.385797571620}, {0.811999924449, 2.570011989984}, {0.841470984808, 2.718281828459}};
    int k = 5;

    for (double x = 0; x <= 1.; x += 1e-3)
    {
        valarray<double> y = spline_eval(t, c, k, x);
        EXPECT_NEAR(y[0], sin(x), 1e-8);
        EXPECT_NEAR(y[1], exp(x), 1e-7);
        valarray<double> dy = spline_eval(t, c, k, x, 1);
        EXPECT_NEAR(dy[0], cos(x), 1e-6);
        EXPECT_NEAR(dy[1], exp(x), 1e-4);
    }
}

TEST(bspline, deg0_spline)
{
    vector<double> t = {0.000000000000, 0.090909090909, 0.181818181818, 0.272727272727, 0.363636363636, 0.454545454545, 0.545454545455, 0.636363636364, 0.727272727273, 0.818181818182, 0.909090909091, 1.000000000000, 1.000000000000};
    vector<double> c = {1.000000000000, 0.991761053172, 0.967179973179, 0.926661804441, 0.870874201036, 0.800736425159, 0.717404199621, 0.622250663975, 0.516843748060, 0.402920335829, 0.282357645152, 0.157142295225};
    int k = 0;
    vector<double> args = {-1.000000000000, -0.842105263158, -0.684210526316, -0.526315789474, -0.368421052632, -0.210526315789, -0.052631578947, 0.105263157895, 0.263157894737, 0.421052631579, 0.578947368421, 0.736842105263, 0.894736842105, 1.052631578947, 1.210526315789, 1.368421052632, 1.526315789474, 1.684210526316, 1.842105263158, 2.000000000000};
    vector<double> vals = {1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 0.991761053172, 0.967179973179, 0.870874201036, 0.717404199621, 0.516843748060, 0.402920335829, 0.157142295225, 0.157142295225, 0.157142295225, 0.157142295225, 0.157142295225, 0.157142295225, 0.157142295225};

    for (int i = 0; i < args.size(); ++ i)
    {
        double val = spline_eval(t, c, k, args[i]);
        EXPECT_NEAR(val, vals[i], 1e-8);
    }
}

TEST(bspline, deg1_spline)
{
    vector<double> t = {0.000000000000, 0.000000000000, 0.090909090909, 0.181818181818, 0.272727272727, 0.363636363636, 0.454545454545, 0.545454545455, 0.636363636364, 0.727272727273, 0.818181818182, 0.909090909091, 1.000000000000, 1.000000000000};
    vector<double> c = {1.000000000000, 0.991761053172, 0.967179973179, 0.926661804441, 0.870874201036, 0.800736425159, 0.717404199621, 0.622250663975, 0.516843748060, 0.402920335829, 0.282357645152, 0.157142295225};
    int k = 1;
    vector<double> args = {-1.000000000000, -0.842105263158, -0.684210526316, -0.526315789474, -0.368421052632, -0.210526315789, -0.052631578947, 0.105263157895, 0.263157894737, 0.421052631579, 0.578947368421, 0.736842105263, 0.894736842105, 1.052631578947, 1.210526315789, 1.368421052632, 1.526315789474, 1.684210526316, 1.842105263158, 2.000000000000};
    vector<double> vals = {1.090628415105, 1.076318665352, 1.062008915598, 1.047699165845, 1.033389416091, 1.019079666338, 1.004769916584, 0.987879830015, 0.930926874835, 0.826576658377, 0.682347633857, 0.504851809931, 0.301393859469, 0.084649197899, -0.132830094079, -0.350309386057, -0.567788678035, -0.785267970013, -1.002747261990, -1.220226553968};

    for (int i = 0; i < args.size(); ++ i)
    {
        double val = spline_eval(t, c, k, args[i]);
        EXPECT_NEAR(val, vals[i], 1e-8);
    }
}

TEST(bspline, deg9_spline)
{
    vector<double> t = {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.172413793103, 0.206896551724, 0.241379310345, 0.275862068966, 0.310344827586, 0.344827586207, 0.379310344828, 0.413793103448, 0.448275862069, 0.482758620690, 0.517241379310, 0.551724137931, 0.586206896552, 0.620689655172, 0.655172413793, 0.689655172414, 0.724137931034, 0.758620689655, 0.793103448276, 0.827586206897, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000, 1.000000000000};
    vector<double> c = {1.000000000000, 1.000000000000, 0.999010815993, 0.996471910375, 0.991726958292, 0.984029204151, 0.972550661334, 0.956396414560, 0.934625317720, 0.906278284281, 0.884502298234, 0.860626882314, 0.834708706540, 0.806809289567, 0.776994852670, 0.745336162561, 0.711908363420, 0.676790798534, 0.640066821971, 0.601823600733, 0.562151907859, 0.502921017682, 0.445772395180, 0.391572140527, 0.341007857985, 0.294610463789, 0.252777860472, 0.215798704387, 0.183874955137, 0.157142295225};
    int k = 9;
    vector<double> args = {0.0000000000000000, 0.0384615384615385, 0.0769230769230769, 0.1153846153846154, 0.1538461538461539, 0.1923076923076923, 0.2307692307692308, 0.2692307692307693, 0.3076923076923077, 0.3461538461538461, 0.3846153846153846, 0.4230769230769231, 0.4615384615384616, 0.5000000000000000, 0.5384615384615385, 0.5769230769230770, 0.6153846153846154, 0.6538461538461539, 0.6923076923076923, 0.7307692307692308, 0.7692307692307693, 0.8076923076923077, 0.8461538461538463, 0.8846153846153847, 0.9230769230769231, 0.9615384615384616, 1.0000000000000000};
    vector<double> vals = {1.0000000000000000, 0.9985236112114698, 0.9940988042935883, 0.9867386447170063, 0.9764648653958853, 0.9633078025154349, 0.9473063059559103, 0.9285076245775500, 0.9069672667052082, 0.8827488362246106, 0.8559238447742330, 0.8265715005873344, 0.7947784746076646, 0.7606386445694422, 0.7242528177972894, 0.6857284335446222, 0.6451792457494318, 0.6027249871442073, 0.5584910157118089, 0.5126079445312270, 0.4652112561062105, 0.4164409023155671, 0.3664408911663956, 0.3153588615704699, 0.2633456473993713, 0.2105548321056154, 0.1571422952248764};
    vector<double> derivs1 = {0.0000000000000142, -0.0767533204830756, -0.1532800054824734, -0.2293540887186236, -0.3047509403444441, -0.3792479302270214, -0.4526250853250680, -0.5246657392203581, -0.5951571718854155, -0.6638912377985163, -0.7306649805510359, -0.7952812321326201, -0.8575491951245479, -0.9172850060818530, -0.9743122784414348, -1.0284626233521745, -1.0795761468898379, -1.1275019221882439, -1.1720984350927148, -1.2132340020199250, -1.2507871587902597, -1.2846470192844346, -1.3147136028656292, -1.3408981296000273, -1.3631232824042296, -1.3813234353453419, -1.3954448474200909};
    vector<double> derivs5 = {0.0000004842877388, -0.3059607823836359, -0.6110183493328805, -0.9142712598259095, -1.2148249741294421, -1.5117914828297216, -1.8042936775600538, -2.0914687874610536, -2.3724676587153226, -2.6464614664944248, -2.9126411087885913, -3.1702194904537464, -3.4184382463190559, -3.6565617168816971, -3.8838893092033686, -4.0997478907229379, -4.3035012252948945, -4.4945470991224283, -4.6723217091728149, -4.8362997955447469, -4.9859976192006457, -5.1209726663616948, -5.2408267870787313, -5.3452057826216333, -5.4338016256224364, -5.5063537163659930, -5.5626489017158747};

    for (int i = 0; i < args.size(); ++ i)
    {
        double val = spline_eval(t, c, k, args[i]);
        double der1 = spline_eval(t, c, k, args[i], 1);
        double der5 = spline_eval(t, c, k, args[i], 5);
        EXPECT_NEAR(val, vals[i], 1e-8);
        EXPECT_NEAR(der1, derivs1[i], 1e-7);
        EXPECT_NEAR(der5, derivs5[i], 1e-3);
    }

    // test extrapolation
    EXPECT_NEAR(0.15700117862434126, spline_eval(t, c, k, -1.), 1e-6);
    EXPECT_NEAR(1.3965488932444714, spline_eval(t, c, k, -1., 1), 1e-6);
    EXPECT_NEAR(-0.32136867148801684, spline_eval(t, c, k, -1., 2), 1e-5);
}

int main(int argc, char* argv[])
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
